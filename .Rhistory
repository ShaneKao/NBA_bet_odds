# node = xmlParse(content(res,as="text"))
# View(xmlToDataFrame(node["//GeoPosition"]))
####################################################
# getStoreData via POST city and town
####################################################
# connector
res = POST("http://emap.pcsc.com.tw/EMapSDK.aspx",
body=list(commandid="SearchStore",city="台北市",town="大安區"))
# parser
node = xmlParse(content(res,as="text"))
View(xmlToDataFrame(node["//GeoPosition"]))
####################################################
# getTown via POST cityid
####################################################
# connector
res = POST("http://emap.pcsc.com.tw/EMapSDK.aspx",
body=list(commandid="GetTown",cityid="01"))
# parser
node = xmlParse(content(res,as="text"))
View(xmlToDataFrame(node["//GeoPosition"]))
####################################################
# getCityCodes via POST cityid
####################################################
res = GET("http://emap.pcsc.com.tw/lib/areacode.js")
resText = content(res,"text",encoding = "utf8")
matches = gregexpr("AreaNode[(][^,]+(,[^,]+){3}",resText)
unlist(regmatches(resText,matches))
cityCodesStr = unlist(regmatches(resText,matches))
str = cityCodesStr[2]
str
matches = gregexpr("[']([^']+)[']",str)
unlist(regmatches(str,matches))
cityCodes = lapply(cityCodesStr,function(str){
matches = gregexpr("[']([^']+)[']",str)
return(unlist(regmatches(str,matches)))
})
cityCodes = lapply(cityCodesStr[2:length(cityCodesStr)],function(str){
matches = gregexpr("[']([^']+)[']",str)
return(gsub("'","",unlist(regmatches(str,matches))))
})
cityCodesDf = data.frame(do.call(rbind,cityCodes),stringsAsFactors = FALSE)
colnames(cityCodesDf) = c("cityName","cityCode")
View(cityCodesDf)
library(httr)
# install.packages("jpeg")
library(jpeg)
library(CSS)
library(XML)
res1 = GET("http://lvr.land.moi.gov.tw/N11/homePage.action")
cookies(res1)
res2 = GET("http://lvr.land.moi.gov.tw/N11/ImageNumberN13?")
captcha <- content(res2)
plot(0:1, 0:1, type = "n")
rasterImage(captcha, 0, 0, 1, 1)
res1Node = content(res1)
res1Node["//form//input"]
library(httr)
url <- "http://ecshweb.pchome.com.tw/search/v3.3/all/results?q=sony&page=1&sort=rnk/dc"
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$prods)
View(data.frame(do.call(rbind,res_json$prods)))
library(httr)
# install.packages("rjson")
library(rjson)
res = GET("http://api.map.com.tw/net/familyShop.aspx?searchType=ShopList&type=&city=%E5%8F%B0%E5%8C%97%E5%B8%82&area=%E4%B8%AD%E5%B1%B1%E5%8D%80&road=&fun=showStoreList")
resStr = content(res,as="text")
sub("[^\\]]*$","",sub("^[^\\[]*","",resStr))
jsonDataString = sub("[^\\]]*$","",sub("^[^\\[]*","",resStr))
jsonData = fromJSON(jsonDataString)
View(data.frame(do.call(rbind,jsonData)))
crawlDcardTitles <- function(target="bg", npage, pat) {
require(data.table)
require(parallel)
require(stringr)
require(rvest)
require(httr)
cl <- makeCluster(detectCores())
on.exit(stopCluster(cl))
pages <- sprintf("https://www.dcard.tw/api/forum/%s/%s", target, 1:npage)
crawlSinglePage <- function(page_url, pat) {
require(data.table)
require(rvest)
require(httr)
response <- GET(page_url)
if ( (rcode <- response$status_code) != 200 ) {
NULL
} else {
content(response) %>%
sapply(function(x) x$version[[1]]$title) %>%
grep(pat, ., value=TRUE)
}
}
parLapplyLB(cl, pages, crawlSinglePage, pat=pat) %>% unlist
}
system.time(
dcardtitles <- crawlDcardTitles("bg", 1000, "室友")
)
dcardarticles %>% head %>% substr(start=1, stop=100)
dcardtitles <- crawlDcardTitles("bg", 1000, "室友")
dcardtitles
dcardarticles %>% head %>% substr(start=1, stop=100)
if ( ! "stringr" %in% rownames(installed.packages()) )
install.packages("stringr")
library("stringr")
str_extract(gossip_titles_cleansed, "\\[問卦\\]")
install.packages("mail")
library(mail)
sendmail("ko8342010@yahoo.com.tw", "R notice", "Calculation finished.\nFetch your data!")
?sendmail
library(sendmailR)
install.packages("sendmailR")
library(sendmailR)
from <- sprintf("<sendmailR@\\%s>", Sys.info()[4])
from
to <- "<olafm@datensplitter.net>"
subject <- "Hello from R"
body <- list("It works!", mime_part(iris))
body
library(sendmailR)
from <- "ko8342010@yahoo.com.tw"
to <- "ko8342010@yahoo.com.tw"
subject <- "Performance Result"
body <- "This is the result of the test:"
sendmail(from=from,to=to,subject=subject,msg=body,control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
)
sendmail(from=from,to=to,subject=subject,msg=body,control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
from <- "ko8342010@google.com"
to <- "ko8342010@google.com"
subject <- "Performance Result"
body <- "This is the result of the test:"
sendmail(from=from,to=to,subject=subject,msg=body,control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
mailControl=list(smtpServer="ASPMX.L.GOOGLE.COM")
from <- "ko8342010@google.com"
to <- "ko8342010@google.com"
subject <- "Performance Result"
body <- "This is the result of the test:"
mailControl=list(smtpServer="ASPMX.L.GOOGLE.COM")
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
from <- "<ko8342010@google.com>"
to <- "<ko8342010@google.com>"
subject <- "Performance Result"
body <- "This is the result of the test:"
mailControl=list(smtpServer="ASPMX.L.GOOGLE.COM")
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
from <- "<ko8342002@google.com>"
to <- "<ko8342002@google.com>"
subject <- "Performance Result"
body <- "This is the result of the test:"
mailControl=list(smtpServer="ASPMX.L.GOOGLE.COM")
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
from <- "<ko8342010@gmail.com>"
to <- "<ko8342010@gmail.com>"
subject <- "Performance Result"
body <- "This is the result of the test:"
mailControl=list(smtpServer="ASPMX.L.GOOGLE.COM")
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
library(mailR)
install.packages("mailR")
from <- "ko8342010@gmail.com"
to <- "ko8342010@gmail.com"
subject <- "Performance Result"
body <- "This is the result of the test:"
mailControl=list(smtpServer="ASPMX.L.GOOGLE.COM")
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
library(mailR)
sender <- "ko8342010@gmail.com"
sendmail_options(smtpServer="ASPMX.L.GOOGLE.COM")
from <- "ko8342010@gmail.com"
to <- "ko8342010@gmail.com"
subject <- "Performance Result"
body <- "This is the result of the test:"
sendmail(from=from,to=to,subject=subject,msg=body)
library(sendmailR)
sendmail_options(smtpServer="ASPMX.L.GOOGLE.COM")
from <- "<ko8342010@gmail.com>"
to <- "<ko8342010@gmail.com>"
subject <- "Performance Result"
body <- "This is the result of the test:"
sendmail(from=from,to=to,subject=subject,msg=body)
sendmail_options(smtpServer="ASPMX.L.GOOGLE.COM", smtpPort="465")
sendmail(from=from,to=to,subject=subject,msg=body)
mailControl=list(smtpServer="smtp.gmail.com", smtpPort="465")
from <- "<ko8342010@gmail.com>"
to <- "<ko8342010@gmail.com>"
subject <- "Performance Result"
body <- "This is the result of the test:"
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
library("rJava", lib.loc="~/R/win-library/3.2")
install.packages("rJava")
library(mailR)
sender <- "ko8342010@gmail.com"
recipients <- c("ko8342010@gmail.com")
send.mail(from = sender,
to = recipients,
subject="Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name="ko8342010@gmail.com", passwd="49453012", ssl=TRUE),
authenticate = TRUE,
send = TRUE)
mailControl=list(smtpServer="smtp.gmail.com")
from <- "<ko8342010@gmail.com>"
to <- "<ko8342010@gmail.com>"
subject <- "Performance Result"
body <- "This is the result of the test:"
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
sink("outfile.txt")
cat("hello")
cat("\n")
cat("world")
sink()
file.show("outfile.txt")
cat("hello")
cat("\n")
cat("world")
sink("outfile.txt")
cat("hello")
cat("\n")
cat("world")
sink()
file.show("outfile.txt")
sink("outfile.txt")
cat("hello")
cat("\n")
cat("world")
file.show("outfile.txt")
sink("outfile.txt")
cat("hello")
cat("\n")
cat("world")
sink()
file.show("outfile.txt")
sink("outfile.txt")
file.show("outfile.txt")
?sink
sink("outfile.txt", append=TRUE)
cat("hello")
cat("\n")
cat("world")
sink()
file.show("outfile.txt")
sink("outfile.txt", append=TRUE)
cat("hello")
cat("\n")
cat("world")
sink()
file.show("outfile.txt")
cat("hello")
cat("\n")
cat("world")
sink()
file.show("outfile.txt")
tryCatch(1, finally = print("Hello"))
e <- simpleError("test error")
e
stop(e)
tryCatch(stop(e), finally = print("Hello"))
tryCatch(stop("fred"), finally = print("Hello"))
tryCatch(stop(e), error = function(e) e, finally = print("Hello"))
tryCatch(1/0, finally = print("Hello"))
tryCatch(1/0, error = function(e) print(e), finally = print("Hello"))
try.catch(1, finally=print("Hello"))
try(1/0)
vari <- 1
tryCatch(print("passes"), error = function(e) print(vari), finally=print("finished"))
vari <- 1/0
tryCatch(print("passes"), error = function(e) print(vari), finally=print("finished"))
1/0
1/1
2=2
2+2
print(1/0)
print(1/1)
1/0
for (i in 1:20) withRestarts(tryCatch(
if((a <- runif(1))>0.5) print(a) else stop(a),
finally = print("loop body finished!")),
abort = function(){})
tryCatch(12=12)
x <- tryCatch(rnorm(-1), error = c)
x
require(RCurl)
library(stringr)
library(XML)
if(format(Sys.time(), "%Y %m")<paste(as.numeric(format(Sys.time(), "%Y")), "11") &
format(Sys.time(), "%Y %m")>paste(as.numeric(format(Sys.time(), "%Y")), "05") ){
SeasonCurrent <- as.numeric(format(Sys.time(), "%Y"))-1
}else{
SeasonCurrent <- as.numeric(format(Sys.time(), "%Y"))
}
SeasonCurrent
datetime <- Sys.Date()-1
datetime
BettingDataTotal <- data.frame()
url <- paste("http://www.sportsbookreview.com/betting-odds/nba-basketball/money-line/?date=", format(datetime[d], "%Y%m%d"), sep = "")
datetime
length(datetime)
d=1
BettingData <- data.frame()
url <- paste("http://www.sportsbookreview.com/betting-odds/nba-basketball/money-line/?date=", format(datetime[d], "%Y%m%d"), sep = "")
url
require(RCurl)
library(stringr)
library(XML)
if(format(Sys.time(), "%Y %m")<paste(as.numeric(format(Sys.time(), "%Y")), "11") &
format(Sys.time(), "%Y %m")>paste(as.numeric(format(Sys.time(), "%Y")), "05") ){
SeasonCurrent <- as.numeric(format(Sys.time(), "%Y"))-1
}else{
SeasonCurrent <- as.numeric(format(Sys.time(), "%Y"))
}
### game date
#datetime <- seq.Date(from = as.Date("2014-10-28"), to = as.Date("2015-03-01"), by = "day")
datetime <- Sys.Date()-1
### money line and  point spreads line
BettingDataTotal <- data.frame()
#datetime <- Sys.Date()-1
for(d in 1:length(datetime)){
BettingData <- data.frame()
url <- paste("http://www.sportsbookreview.com/betting-odds/nba-basketball/money-line/?date=", format(datetime[d], "%Y%m%d"), sep = "")
html <- getURLContent(url)
xml <- htmlParse(html, asText = TRUE, encoding = "UTF-8")
## team name
xmlnodeteam <- getNodeSet(xml, path = "//div//span[@class = 'team-name']")
teamname <- sapply(xmlnodeteam, xmlValue)
if(length(teamname) != 0){
gamenumber <- length(teamname)/2
BettingData[1:gamenumber, "GameDate"] <- as.character(datetime[d])
for(t in 0:(gamenumber-1)){
BettingData[t+1,"Away_Team"] <- teamname[t*2+1]
BettingData[t+1,"Home_Team"] <- teamname[t*2+2]
}
## money line
xmlnodeline <- getNodeSet(xml, path = "//div//div[@class = 'eventLine-book-value ']")
moneyline <- sapply(xmlnodeline, xmlValue)
moneyline <- moneyline[-grep(":", moneyline)]
moneylineHome <- moneyline[(1:length(moneyline))%%2 == 0]
moneylineAway <- moneyline[(1:length(moneyline))%%2 == 1]
for(m in 0:(gamenumber-1)){
BettingData[m+1, "bet365_Away"] <- moneylineAway[(m*10+7)]
BettingData[m+1, "bet365_Home"] <- moneylineHome[(m*10+7)]
BettingData[m+1, "PINNACLE_Away"] <- moneylineAway[(m*10+2)]
BettingData[m+1, "PINNACLE_Home"] <- moneylineHome[(m*10+2)]
}
### point spreads url
pointspreads.url <- paste("http://www.sportsbookreview.com/betting-odds/nba-basketball/?date=", format(datetime[d], "%Y%m%d"), sep = "")
pointspreads.html <- getURLContent(pointspreads.url)
pointspreads.xml <- htmlParse(pointspreads.html, asText = TRUE, encoding = "UTF-8")
## total and point spreads
xmlnodeline.bet365 <- getNodeSet(pointspreads.xml, path = "//div[@rel = '43']//div[@class = 'eventLine-book-value ']//b") ### bet365
#xmlnodeline.PINNACLE <- getNodeSet(xml, path = "//div[@rel = '238']//div[@class = 'eventLine-book-value ']//b") ### 5Dimes
pointspreads.bet365 <- sapply(xmlnodeline.bet365, xmlValue)
#pointspreads.PINNACLE <- sapply(xmlnodeline.5Dimes, xmlValue)
pointspreads.fun <- function(pointspreads){
bettingdata <- data.frame()
moneylineHome <- pointspreads[(1:length(pointspreads))%%2 == 0]
moneylineAway <- pointspreads[(1:length(pointspreads))%%2 == 1]
for(m in 1:gamenumber){
bettingdata[m, "pointspreads_bet365_Away"] <- str_extract(moneylineAway[m], "^.\\w.")
bettingdata[m, "pointspreads_bet365_Home"] <- str_extract(moneylineHome[m], "^.\\w.")
bettingdata[m, "spreadline_bet365_Away"] <- str_extract(moneylineAway[m], ".\\d+$")
bettingdata[m, "spreadline_bet365_Home"] <- str_extract(moneylineHome[m], ".\\d+$")
}
return(bettingdata)
}
pointspreadsdata <- pointspreads.fun(pointspreads.bet365)
BettingData <- cbind(BettingData, pointspreadsdata)
BettingDataTotal <- rbind(BettingDataTotal, BettingData)
if(d %% 10 == 0){
Sys.sleep(60)
}
print(d)
}
}
BettingDataTotal$pointspreads_bet365_Away <- str_replace(BettingDataTotal$pointspreads_bet365_Away, iconv("½", "UTF-8", "UTF-8"), ".5")
BettingDataTotal$pointspreads_bet365_Home <- str_replace(BettingDataTotal$pointspreads_bet365_Home, iconv("½", "UTF-8", "UTF-8"), ".5")
BettingDataTotal$pointspreads_bet365_Away <- str_replace(BettingDataTotal$pointspreads_bet365_Away, "\\s", "")
BettingDataTotal$pointspreads_bet365_Home <- str_replace(BettingDataTotal$pointspreads_bet365_Home, "\\s", "")
BettingDataTotal$pointspreads_bet365_Away <- str_replace(BettingDataTotal$pointspreads_bet365_Away, "PK-", "0")
BettingDataTotal$pointspreads_bet365_Home <- str_replace(BettingDataTotal$pointspreads_bet365_Home, "PK-", "0")
idx <- grep("Conference", BettingDataTotal$AwayTeam)
if(length(idx) != 0){
BettingDataTotal <- BettingDataTotal[-idx, ]
}
#write.table(BettingDataTotal ,sprintf("~/Documents/Sport_analysis/basketball/Betting_Data/Batting_Data_pointspreads_%s.txt", SeasonCurrent),
#            row.names = FALSE, append = TRUE, sep = "\t", col.names = FALSE)
BettingDataTotal
if ( ! "httr" %in% rownames(installed.packages()) )
install.packages("httr")
library("httr")
if ( ! "httr" %in% rownames(installed.packages()) )
install.packages("httr")
library("httr")
# the target API url
api_addr <- "https://graph.facebook.com/v2.4/me"
# a valid token
token <- "CAACEdEose0cBALIKfpOJ9cZBmZCa02ZBuZAGzg7wumfcjJNexUVz3ObOTaIE1U4E8R8GlBLSeM3lHeLiXoZCyEYXmrqeAZBP2LhnTyZATuxJI3ZB2pMp4OusOdPcgIcTQdvqYWUlIRPP4SUfi10Sf1jUZB3BU42EdZAHdFALRjg3xOj5KF41SyoBK79zXx6bR6NhhWSSZAiLpN3JSStsh9clAZBZB"
# build the query string for the GET method
qs <- list(metadata=1, access_token=token)
api_addr <- "https://graph.facebook.com/v2.4/me"
# a valid token
token <- "CAACEdEose0cBAKnOAOx6ABGsbGWoo5W4E9HM8ftA95GtZBp6OQhFZCHCbo4xdzoU3g3ief1Qb2rhM4AO2BbI6QofUrFDuZBaUesiwPZAqRy6RahX5uTZC0iWLqZA1rTizn5BGzGZA6GbwXQJ22Ktmb4XEut24j8DNAYcWpurkLZA7B0L6sdJ0pSZBAh0CQJPQ17nq3JZCYcryqMgZDZD"
# build the query string for the GET method
qs <- list(metadata=1, access_token=token)
qs
r <- GET(api_addr, query=qs)
print(r)
if ( ! "httr" %in% rownames(installed.packages()) )
install.packages("httr")
library("httr")
# the target API url
api_addr <- "https://graph.facebook.com/v2.4/me"
# a valid token
token <- "CAACEdEose0cBAKnOAOx6ABGsbGWoo5W4E9HM8ftA95GtZBp6OQhFZCHCbo4xdzoU3g3ief1Qb2rhM4AO2BbI6QofUrFDuZBaUesiwPZAqRy6RahX5uTZC0iWLqZA1rTizn5BGzGZA6GbwXQJ22Ktmb4XEut24j8DNAYcWpurkLZA7B0L6sdJ0pSZBAh0CQJPQ17nq3JZCYcryqMgZDZD"
# build the query string for the GET method
qs <- list(metadata=1, access_token=token)
r <- GET(api_addr, query=qs)
print(r)
getAllLikes1 <- function(token, node) {
require(httr)
result <- list()
api_addr <- sprintf("https://graph.facebook.com/v2.4/%s/likes", node)
qs <- list(fields="name", access_token=token)
r <- GET(api_addr, query=qs)
res <- content(r)
if ( !length(res$data) ) {
result
} else {
result <- c(result, res$data)
while ( "next" %in% names(res$paging) ) {
cursor_next <- res$paging$cursors$after
qs$after <- cursor_next
r <- GET(api_addr, query=qs)
res <- content(r)
result <- c(result, res$data)
}
result
}
}
getAllLikes2 <- function(token, node) {
result <- list()
api_addr <- sprintf("https://graph.facebook.com/v2.4/%s/likes", node)
qs <- list(fields="name", access_token=token)
r <- GET(api_addr, query=qs)
res <- content(r)
if ( !length(res$data) ) {
result
} else {
result <- c(result, res$data)
while ( "next" %in% names(res$paging) ) {
next_query <- res$paging$`next`
r <- GET(next_query)
res <- content(r)
result <- c(result, res$data)
}
result
}
}
str2Timestamp("2015-01-01")
library(rpart)
library(rpart.plot)
setwd("C:/Users/shane/PycharmProjects/NBA_bet_odds")
hou_data = read.csv("hou_data.csv", stringsAsFactors = FALSE, header = TRUE)
hou_data$strk <- substring(hou_data$strk,1, 2)
train_data = hou_data[,-c(1)]
model = rpart(result~.,train_data, control=rpart.control(maxdepth=3, # at most 1 split
cp=-1, # any positive improvement will do
minsplit=2,
minbucket=1, # even leaves with 1 point are accepted
xval=0))
prp(model, faclen = 0, cex = 0.8, extra = 1)
summary(train_data )
hou_data[hou_data$strk == " W" & hou_data$location == " H" & hou_data$opp_conference == "E",]
library(rpart)
library(rpart.plot)
setwd("C:/Users/shane/PycharmProjects/NBA_bet_odds")
hou_data = read.csv("hou_data.csv", stringsAsFactors = FALSE, header = TRUE)
hou_data[hou_data$strk == " L" & hou_data$opp_standing == " E" & hou_data$opp_conference == "E",]
hou_data[hou_data$strk == " L" & hou_data$opp_standing == "1" & hou_data$opp_conference == "E",]
hou_data$opp_standing
hou_data[hou_data$strk == " L" & hou_data$opp_standing == 1 & hou_data$opp_conference == "E",]
hou_data$opp_standing == 1
hou_data[hou_data$strk == " L" & hou_data$opp_standing == 1 & hou_data$opp_conference == "E",]
library(rpart)
library(rpart.plot)
setwd("C:/Users/shane/PycharmProjects/NBA_bet_odds")
hou_data = read.csv("hou_data.csv", stringsAsFactors = FALSE, header = TRUE)
hou_data$strk <- substring(hou_data$strk,1, 2)
train_data = hou_data[,-c(1)]
model = rpart(result~.,train_data, control=rpart.control(maxdepth=3, # at most 1 split
cp=-1, # any positive improvement will do
minsplit=2,
minbucket=1, # even leaves with 1 point are accepted
xval=0))
prp(model, faclen = 0, cex = 0.8, extra = 1)
summary(train_data )
hou_data[hou_data$strk == " L" & hou_data$opp_standing == 1 & hou_data$opp_conference == "E",]
library(rpart)
library(rpart.plot)
setwd("C:/Users/shane/PycharmProjects/NBA_bet_odds")
hou_data = read.csv("hou_data.csv", stringsAsFactors = FALSE, header = TRUE)
hou_data$strk <- substring(hou_data$strk,1, 2)
train_data = hou_data[,-c(1)]
model = rpart(result~.,train_data, control=rpart.control(maxdepth=3, # at most 1 split
cp=-1, # any positive improvement will do
minsplit=2,
minbucket=1, # even leaves with 1 point are accepted
xval=0))
prp(model, faclen = 0, cex = 0.8, extra = 1)
# summary(train_data )
hou_data[hou_data$strk == " L" & hou_data$opp_standing == 1 & hou_data$opp_conference == "E",]
hou_data[hou_data$strk == " L" & hou_data$opp_standing == 1 & hou_data$opp_conference == "E",]
